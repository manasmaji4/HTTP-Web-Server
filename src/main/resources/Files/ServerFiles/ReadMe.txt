	
				----------
				WEB SERVER
				----------
										

										
	----------------------
 	 About the Web Server
	----------------------
	
	This is an implementation of a HTTP/1.1 compliant web server. As a project it has been the aim of the 
	developer to develop a robust, efficient and standard-based server with free available source code. 

	-----------------------
	 Functionality Covered
	-----------------------

	1. GET-  On submission of a Get request(download) for a file the server checks for its availability in its 
	repository and sends a suitable response to the client along with the file based on its 
	availability.

	2. POST- On submission of a Post request(upload) for a file, the server creates the file in its repository, 
	unless it is already existing there. Based on the status of the File upload operation a suitable response 
	is sent to the client.
	
	3. HEAD- The server on being requested for the Header request for a file returns the Header 
	information of the file along with the response based on its availability.

	4. DELETE- The server deletes a file(if present) from its repository, on getting a Delete request for the file.
	Delete request for any non user uploaded file (i.e. server files) are not entertained & a suitable response 
	is sent to the user on completion of the operation.

	5. OPTIONS- The server returns the Options allowed by it on receiving a Options request from the client.
	

	
	-------------- Known Limitations --------------

	  File Types Supported:
	-------------------------
	The server is capable of serving request for all common types of file. They include file of the type-
	
	text- txt, html, css, java, c, c++, log

	audio- aac, mp3

	video- wmv, mpeg, mp4, 3gp, avi, flv

	image- gif, png, jpg, jpeg, bmp

	application- epub, js, exe, pptx, xlsx, doc, docx, torrent, class, swf, pdf, rtf, jar, rar, zip
	
	The mime type of any file can be added to the configuration file if needed by the user. Follow the simple format
	of  extension=mimeType (NOTE- MUST BE IN LOWER CASE)
		eg: txt=text/plain
		
	
	 Pre-requisites
	----------------
	1. Design time- JDK SE 6(or higher)
			
			Eclipse IDE Juno 4.2.2(or higher). Make sure that you install the correct Eclipse based on the 
			version of windows running on your machine (32-bit or 64-bit). Other IDE (eg. NetBeans can also 
			be used)
	
	2. Compile time- Maven 3.0.5(or higher) for building the project
		
			 Apache log4j 1.2.14 (or higher) for logging activities
	

	--------------
	 How to Build
	-------------- 
	
	 To compile the project goto source directory(where the pom.xml is kept) and run 'mvn clean install', it will 
	 make a jar file without dependencies in the target folder with the name "<project_name>-1.0-SNAPSHOT.jar".
	 (For testing goto the source directory and run 'mvn test') 
	  
	 To see the log file(named httpserver.log) generated by the server,go to log directory (that is created during 
	 runtime) in the root.


	 -------------------------  
	  Configurable Properties
	 -------------------------
	 
	 1. Connection Configuration:
	 	 PortNo-         It is the port of the hosting machine that will be used by the server socket to listen to 
	 	                 incoming client requests.
	 	 BackLog-        Its is the requested maximum length of the queue of incoming connections.
		 BindingAddress- The hosting machine IP.	
	 
	 2. ThreadPool Configuration:
	 	 CorePoolSize-    The number of threads to keep in the pool, even if they are idle.
	 	 MaxPoolSize-     The maximum number of threads to allow in the pool.
	 	 KeepAliveTime-   When the number of threads is greater than the core, this is the maximum time that excess 
	 	 				  idle threads will wait for new tasks before terminating.
	 	 WaitingQueueSize-The size of the queue to use for holding tasks before they are executed. This queue will 
	 	 				  hold only the Runnable tasks submitted by the execute method.
	 	 TimeOutTime-	  The maximum time to wait for a thread to complete execution after a shutdown request is sent.
	 	
	 3. BaseDirectoryLocation: The location where the files uploaded by the server clients will be stored.
	 
	 4. MaxFileSize:	The maximum size of file allowed to be uploaded in bytes.
	
	
	---------------------
	 Starting the Server
	---------------------
	
	1. Double click on the startup.bat file to start the Http Server. 	
	2. Open command prompt,navigate to & open the lib directory(the directory containing the executable jar file),
   	run the 'WebServer-1.0-SNAPSHOT.jar' file by typing 'java -jar WebServer-1.0-SNAPSHOT.jar'.
   

	----------------
	 Stress Testing
	----------------
	
	Using apache bench it has been noted that the web server is capable of serving 918 requests per second on an average.
	
   